{"version":3,"sources":["images/Logo.png","Components/ArtyomCommands.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ArtyomCommandsManager","ArtyomInstance","this","_artyom","Artyom","addCommands","indexes","action","say","window","open","smart","i","month","Date","getFullYear","console","log","Jarvis","App","props","context","startAssistant","bind","stopAssistant","speakText","handleTextareaChange","buttonStart","state","artyomActive","textareaValue","artyomIsReading","textState","loadCommands","_this","initialize","lang","debug","continuous","soundex","listen","then","getAvailableCommands","setState","catch","err","error","fatality","onEnd","event","target","value","divGrabando","className","style","animationDelay","src","require","width","padding","backgroundColor","type","onClick","rows","onChange","marginBottom","disabled","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.be317b91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.32ed4a80.png\";","export default class ArtyomCommandsManager {\r\n\r\n    // The ArtyomCommandsManager class expects as argument in the constructor\r\n    // an already declared instance of Artyom.js\r\n    constructor (ArtyomInstance){\r\n        this._artyom = ArtyomInstance;\r\n    }\r\n    \r\n    // Execute the loadCommands method to inject the methods to the instance of Artyom\r\n    loadCommands(){\r\n        let Artyom = this._artyom;\r\n\r\n        // Here you can load all the commands that you want to Artyom\r\n        return Artyom.addCommands([\r\n            {\r\n                indexes: [\"Hola\", \"buenos días\", \"Buenas tardes\"],\r\n                action: () => {\r\n                    Artyom.say(\"Hola, como estas?, cuentame como podemos ayudarte\");\r\n                    //alert(\"Dijiste Hola\");\r\n                }\r\n            },\r\n            {\r\n                indexes: [\"adios\", \"hasta luego\", \"chao\"],\r\n                action: () => {\r\n                    Artyom.say(\"Hasta luego, ¡regresa pronto!\");\r\n                    //alert(\"Dijiste Hola\");\r\n                }\r\n            },\r\n            {\r\n                indexes: [\"visitar pagina de kaleido\" , \"pagina de kaleido\"],\r\n                action: () => {\r\n                    Artyom.say(\"ahí vamos\");\r\n                    window.open(\"https://kaleidolab.co/\");\r\n                }\r\n            },\r\n            /*{\r\n                indexes: [/(Kaleido|Kalei|quien|hablame) /ig, new RegExp(\"hablame de Kaleido\", \"ig\")],\r\n                smart:true,\r\n                action: function(i){\r\n                    Artyom.say(\"Todo bien\");\r\n                }\r\n            },*/\r\n            {\r\n                indexes: [\"Generar reporte de * de este año\"],\r\n                smart: true,\r\n                action: (i, month) => {\r\n                    let year = new Date().getFullYear();\r\n                    \r\n                    //Artyom.say(`Generando reporte de ${month} ${year} `);\r\n                    console.log(\"Mencionaste \" + month);\r\n                    Artyom.say(\"Listo\");\r\n                }\r\n            },\r\n            {\r\n                indexes: [\"Háblame * Kaleido\", \"Quiénes * Kaleido\", \"Quién * Kaleido\"],\r\n                smart: true,\r\n                action: (i, month) => {\r\n                    \r\n                    //Artyom.say(`Generando reporte de ${month} ${year} `);\r\n                    console.log(\"Mencionaste \" + month);\r\n                    Artyom.say(\"Somos el primer laboratorio de tecnologías de realidad virtual y realidad aumentada en Colombia. Innovamos con su empresa o institución en la generación de experiencias inmersivas de alto impacto.\");\r\n                }\r\n            },\r\n\r\n        ]);\r\n    }\r\n}","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\n// Import the Artyom library\nimport Artyom from 'artyom.js';\n\n// Import the previously created class to handle the commands from another file\nimport ArtyomCommandsManager from './Components/ArtyomCommands';\n\nconst Jarvis = new Artyom();\n\nexport default class App extends React.Component {\n  constructor (props, context){\n      super(props, context);\n\n      // Add `this` context to the handler functions\n      this.startAssistant = this.startAssistant.bind(this);\n      this.stopAssistant = this.stopAssistant.bind(this);\n      this.speakText = this.speakText.bind(this);\n      this.handleTextareaChange = this.handleTextareaChange.bind(this);\n      this.buttonStart = this.buttonStart.bind(this);\n\n      // Prepare simple state\n      this.state = {\n          artyomActive: false,\n          textareaValue: \"\",\n          artyomIsReading: false,\n          textState: \"Presiona sobre el botón Comenzar\"\n      };\n\n      // Load some commands to Artyom using the commands manager\n      let CommandsManager = new ArtyomCommandsManager(Jarvis);\n      CommandsManager.loadCommands();\n  }\n\n  buttonStart(){\n      if(this.state.artyomActive){\n          this.stopAssistant();\n      }else{\n          this.startAssistant();\n      }\n  }\n\n  startAssistant() {\n      let _this = this;\n\n      console.log(\"Artyom succesfully started !\");\n    \n      Jarvis.initialize({\n          lang: \"es-ES\",\n          debug: true,\n          continuous: true,\n          soundex: true,\n          listen: true\n      }).then(() => {\n          // Display loaded commands in the console\n          console.log(Jarvis.getAvailableCommands());\n\n          Jarvis.say(\"Bienvenido al asistente virtual de Kaleido Lab\");\n          _this.setState({\n              artyomActive: true,\n              textState: \"Escuchando...\"\n          });\n      }).catch((err) => {\n          console.error(\"Oops, ha ocurrido un error!\", err);\n      });\n  }\n\n  stopAssistant() {\n      let _this = this;\n\n      Jarvis.fatality().then(() => {\n          console.log(\"Jarvis has been succesfully stopped\");\n          Jarvis.say(\"Hasta Luego, ¡Regresa pronto!\");\n          _this.setState({\n              artyomActive: false,\n              textState: \"Presiona sobre el botón Comenzar\"\n          });\n          \n      }).catch((err) => {\n          console.error(\"Oops, ha ocurrido un error!\", err);\n\n          _this.setState({\n              artyomActive: false\n          });\n      });\n  }\n\n  speakText() {\n      let _this = this;\n\n      _this.setState({\n          artyomIsReading: true\n      });\n\n      // Speak text with Artyom\n      Jarvis.say( _this.state.textareaValue, {\n          onEnd() {\n              _this.setState({\n                  artyomIsReading: false\n              });\n          }\n      });\n  }\n\n  handleTextareaChange(event) {\n      this.setState({\n          textareaValue: event.target.value\n      });\n  }\n\n  render() {\n    let divGrabando;\n    if(this.state.artyomActive){\n        divGrabando = \n        <div className=\"containerAnimated\" >\n            <div className=\"circle\" style={{animationDelay: \"0s\"}}></div>\n            <div className=\"circle\" style={{animationDelay: \"1s\"}}></div>\n            <div className=\"circle\" style={{animationDelay: \"2s\"}}></div>\n            <div className=\"circle\" style={{animationDelay: \"3s\"}}></div>\n        </div>\n    }\n    else {\n        divGrabando = <div className=\"containerAnimated\" >\n            <img src={require(\"./images/Logo.png\")} style={{width: \"80%\"}} />\n        </div>\n    }\n\n      return (\n          <div className=\"container\">\n              <h1 style={{padding:\"0 50px\"}}>Bienvenido al asistente virtual de Kaleido Lab</h1>\n              \n            {divGrabando}\n                \n\n              {/* Voice commands action buttons */}\n              <input style={{backgroundColor: this.state.artyomActive? \"#f44336\":\"#008CBA\" }} type=\"button\" className=\"button\" value={this.state.artyomActive?\"Terminar\":\"Comenzar\"}  onClick={this.buttonStart}/>\n              {/*<input type=\"button\" value=\"Terminar\" disabled={!this.state.artyomActive} onClick={this.stopAssistant}/>*/}\n\n              {/* Speech synthesis Area */}\n              <p>{this.state.textState}</p>\n              <br/>\n              <br/>\n\n              <p>Escribe algo para leer</p>\n              \n              <textarea rows=\"5\" onChange={this.handleTextareaChange} style={{width: \"40%\"}} value={this.state.textareaValue}/>\n              <br/>\n              {/* Read the text inside the textarea with artyom */}\n              <input type=\"button\" className=\"button\" style={{backgroundColor:\"#4CAF50\", padding: \"10px 20px\", marginBottom:\"3em\"}} value=\"Leer texto\" disabled={this.state.artyomIsReading} onClick={this.speakText}/>\n          </div>\n      )\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}